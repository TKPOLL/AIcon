処理の流れ

定数の定義
i (i=1,2,…,33) : 33の業種を表す 
P_i (i=1,2,…,33) : 業種iに対する上位〜％を表す
例：「P_1 = 70 」は業種(コード0050:水産・農林業)の上位70％を表す

＜csvファイルの読み込み＞

読み込み時に、引数「上位何％」(:P_1,P_2, ….. , P_33)を参照し、
各業種の単語リストcsvの中から、上位P_i %のデータを取ってくる
（仮に、iのファイルの行数が l_i 行だった場合は、
 (l_i * P_i / 100)行分のデータを使うことにする。
小数第一位は切り上げとする。  ）

(業種コード,単語,出現回数)をオブジェクトとしてもつ
業種単語リストDを作成する。（リストの要素数をkとする）

（以下、とりあえず、一個の問題文の場合のみ作っておく）


＜問題文の読み込み＞


utf-8形式の問題文を読み込み
形態素解析で分解（助詞を消す処理が必要）
分解したデータを配列へ格納（配列の要素数をNとする）
また、配列の中に入っている単語をw_i (i = 1,2,.....,N)とする。

単語のヒットリスト（Hit List）作成処理
ヒットリストを作成する。
ヒットリスト：H_i (i = 1,2,...N)
型：配列型（要素数k）

処理内容：
ヒットリストH_iの数だけ繰り返し行う（N回）
	業種単語リストDの先頭の要素から単語の数だけ繰り返し処理する
		もし、現在の処理行mの単語がw_iと一致する場合はヒットリストの第m要素H_i_mに1、
					　 一致しない場合はH_i_mに0を格納する



ヒットリスト作成結果(イメージ)： k行×N列の行列になる。
————————————————————————————————————————————————————————————————————————————————————————————————————
業種コード|単語||w_1|w_2|w_3|w_4|w_5|w_6|w_7|…..|w_N|
0050    |雄牛||1  |0  |0  |0  |1  |0  |1  | ….|1  |     この場合、牛は一文の中で、４回ヒット
0050    |牧場||0  |0  |0  |1  |   |0  |0  | ….|0  |     この場合、牧場は一文の中で、1回ヒット
0050    |国産||0  |0  |0  |0  |   |0  |0  | ….|0  |     この場合、国産は一文の中で、0回ヒット

・・・・・・・
・・・・・・・
3050    |雄牛||1  |0  |0  |0  |1  |0  |1  | ….|1  |    この場合、牛は一文の中で、４回ヒット
（k行存在する）



＜ヒットリスト集計処理＞
作成したヒットリストの集計を行う
業種コード単位に、何回ヒットしたかを集計し、結果リストR(配列数33)に格納する。


＜結果書き出し処理＞
配列の中で最も大きい数字が第１予測の業種、２番目に大きい数字が第２予測の業種、３番目に大きい数字が第２予測の業種となる。
この結果をcsvに書き出す。



確認すること
①何回ヒットしたかを数えるのか？
それとも、何単語ヒットしたのかを数えるのか？
「何単語ヒットしたのかを数えるのか？」の場合は、
集合{w_i| i=1,2,...N}の重複を削除してもよいことになるため、処理時間を減らすことができる。

②ヒットリスト作成処理自体は、並べ替えをすることで、処理時間を減らすことができるか？
③ヒットリストの行を見たときに、全ての要素が0の不要な行が存在する
これらを消すことで処理やマシン不可の軽減を図りたい。
④読み込み時点で上位〜％のデータしかとってないから、実際には、出現回数の要素はいらないかも


